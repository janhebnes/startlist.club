@model IEnumerable<FlightJournal.Web.Models.FlightVersionHistory>
@helper TruncateDate(DateTime input)
{
    if (input.Year == DateTime.Today.Year)
    {
        @(input.ToString("ddd. ") + input.ToString("m"));
    }
    else
    {
        @input.ToShortDateString()
    }
}
@{
    ViewBag.Title = @_("Changelog");
}
<h2>
    @_("Changelog")
</h2>
<fieldset>
    <legend>@_("Flight")</legend>
    <table class="tablesorter table table-responsive table-striped table-hover table-condensed">
        <thead>
            <tr>
                <th>
                    @_("Timestamp")
                </th>
                <th>
                    @_("User")
                </th>
                <th>
                    @_("Date")
                </th>
                <th>
                    @_("Plane")
                </th>
                <th>
                    @_("Pilots")
                </th>
                <th>
                    @_("Departure")
                </th>
                <th>
                    @_("Landing")
                </th>
                <th class="hidden-sm">
                    @_("Take-off")
                </th>
                <th class="hidden-sm">
                    @_("Tacho")
                </th>
                <th class="hidden-xs">
                    @_("Comment")
                </th>
                <th class="hidden-print">
                </th>
                <th class="hidden-xs">
                    @_("Action")
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {

                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Created)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastUpdatedBy)
                    </td>
                    <td>
                        @TruncateDate(item.Date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Plane)
                    </td>
                    <td>
                       @if (item.Pilot != null)
                       {
                        @item.Pilot.Name
                           if (item.PilotBackseat != null)
                           {
                            <text>/ </text>
                            @item.PilotBackseat.Name
                           }
                           if ((item.Betaler != null) && (item.Betaler != item.Pilot))
                           {
                            @Html.Raw(string.Format(" " + _("(paid by {0})"), item.Betaler.Name))
                           }
                           if ((item.Betaler == null) && (item.Pilot != null))
                           {
                            <text> </text>
                            @_("(missing payer)")
                           }
                       }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Departure)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Landing)
                    </td>
                    <td class="hidden-sm">
                        @Html.DisplayFor(modelItem => item.StartedFrom.Name)
                        @if ((item.LandedOn != null) && (item.LandedOn.Name != item.StartedFrom.Name))
                        {
                            <text>, </text>
                            @Html.DisplayFor(modelItem => item.LandedOn.Name)
                        }
                    </td>
                    <td class="hidden-sm">
                        @Html.DisplayFor(modelItem => item.TachoDeparture)
                        @if (item.TachoDeparture.HasValue && item.TachoLanding.HasValue)
                        {
                            <text> / </text>
                        }
                        @Html.DisplayFor(modelItem => item.TachoLanding)
                    </td>
                    <td class="hidden-xs">
                        @Html.DisplayFor(modelItem => item.Description, "Description")
                    </td>
                    <td class="hidden-print">
                        @Html.ActionLink(_("Details"), "Details", new { id = item.FlightId }, new { @class = "btn btn-default btn-sm" })
                    </td>
                    <td class="hidden-xs">
                        @if (item.State == "Deleted")
                        {
                            <strong class="error">@_("DELETED")</strong>
                        }
                        else
                        {
                            @item.State
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</fieldset>
<p>
    <a href="javascript:window.history.back();" class="btn btn-default">@_("Back")</a>

    @Html.ActionLink(_("Change history"), "History", new { skip = ViewBag.Skip + 100 }, new { @class = "btn btn-default" })
</p>
@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            $(".tablesorter").tablesorter();
        }
    );
    </script>
}
